// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20200916043939_AddColumnEnrollNumber")]
    partial class AddColumnEnrollNumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entities.AccountAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExcludedProfitAndLossReport")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Reconcile")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UserTypeId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountAccounts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountAccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IncludeInitialBalance")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountAccountTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountFinancialReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("Sign")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountFinancialReports");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountFinancialReportAccountAccountTypeRel", b =>
                {
                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FinancialReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountTypeId", "FinancialReportId");

                    b.HasIndex("FinancialReportId");

                    b.ToTable("AccountFinancialReportAccountAccountTypeRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountFullReconcile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ExchangeMoveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ExchangeMoveId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountFullReconciles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountTotalSigned")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountUntaxed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInvoice")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountFixed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MoveName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Reconciled")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RefundInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Residual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ResidualSigned")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JournalId");

                    b.HasIndex("MoveId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("RefundInvoiceId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountInvoices");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceAccountMoveLineRel", b =>
                {
                    b.Property<Guid>("AccountInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoveLineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountInvoiceId", "MoveLineId");

                    b.HasIndex("MoveLineId");

                    b.ToTable("AccountInvoiceAccountMoveLineRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnostic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LaboLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceSubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceSubTotalSigned")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToothCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ToothId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UoMId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LaboLineId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseLineId");

                    b.HasIndex("ToothCategoryId");

                    b.HasIndex("ToothId");

                    b.HasIndex("UoMId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountInvoiceLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceLineToothRel", b =>
                {
                    b.Property<Guid>("InvoiceLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToothId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InvoiceLineId", "ToothId");

                    b.HasIndex("ToothId");

                    b.ToTable("AccountInvoiceLineToothRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoicePaymentRel", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId", "InvoiceId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("AccountInvoicePaymentRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountJournal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DedicatedRefund")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DefaultCreditAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DefaultDebitAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RefundSequenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SequenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UpdatePosted")
                        .HasColumnType("bit");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DefaultCreditAccountId");

                    b.HasIndex("DefaultDebitAccountId");

                    b.HasIndex("RefundSequenceId");

                    b.HasIndex("SequenceId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountJournals");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountMove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountResidual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountResidualSigned")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountTaxSigned")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountTotalSigned")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountUntaxed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountUntaxedSigned")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoicePaymentRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoicePaymentState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InvoiceUserId");

                    b.HasIndex("JournalId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountMoves");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountMoveLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountInternalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AmountResidual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateMaturity")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountFixed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ExcludeFromInvoiceTab")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FullReconcileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LaboLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MoveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MoveName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhieuThuChiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PriceSubtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductUoMId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Reconciled")
                        .HasColumnType("bit");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesmanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FullReconcileId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LaboLineId");

                    b.HasIndex("MoveId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PhieuThuChiId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUoMId");

                    b.HasIndex("PurchaseLineId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountMoveLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountMovePaymentRel", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoveId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId", "MoveId");

                    b.HasIndex("MoveId");

                    b.ToTable("AccountMovePaymentRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountPartialReconcile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CreditMoveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DebitMoveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FullReconcileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreditMoveId");

                    b.HasIndex("DebitMoveId");

                    b.HasIndex("FullReconcileId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountPartialReconciles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Communication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartnerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDifferenceHandling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("WriteoffAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JournalId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.HasIndex("WriteoffAccountId");

                    b.ToTable("AccountPayments");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountRegisterPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Communication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartnerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JournalId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountRegisterPayments");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountRegisterPaymentInvoiceRel", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId", "InvoiceId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("AccountRegisterPaymentInvoiceRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationRoleFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Func")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("WriteById");

                    b.ToTable("ApplicationRoleFunctions");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FacebookPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUserRoot")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FacebookPageId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PartnerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DotKhamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DotKhamId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppointmentMailMessageRel", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MailMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentId", "MailMessageId");

                    b.HasIndex("MailMessageId");

                    b.ToTable("AppointmentMailMessageRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CardCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PointInPeriod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPoint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpgradeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UpgradeTypeId");

                    b.HasIndex("WriteById");

                    b.ToTable("CardCards");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CardHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PointInPeriod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TotalPoint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TypeId");

                    b.HasIndex("WriteById");

                    b.ToTable("CardHistories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CardType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("BasicPoint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NbPeriod")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PricelistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PricelistId");

                    b.HasIndex("WriteById");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ChamCong", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("HourWorked")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOut")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("WorkEntryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WorkEntryTypeId");

                    b.HasIndex("WriteById");

                    b.ToTable("ChamCongs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Commission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CommissionProductRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppliedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CategId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PercentFixed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategId");

                    b.HasIndex("CommissionId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("CommissionProductRules");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CommissionSettlement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SaleOrderLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SaleOrderLineId");

                    b.HasIndex("WriteById");

                    b.ToTable("CommissionSettlements");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountIncomeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PeriodLockDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountExpenseId");

                    b.HasIndex("AccountIncomeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKham", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssistantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssistantUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("AssistantId");

                    b.HasIndex("AssistantUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("DotKhams");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKhamLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DotKhamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoutingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DotKhamId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RoutingId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("DotKhamLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKhamLineOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LineId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("DotKhamLineOperations");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKhamStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DotKhamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInclude")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DotKhamId");

                    b.HasIndex("InvoicesId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleLineId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("WriteById");

                    b.ToTable("DotKhamSteps");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnrollNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("HourlyWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssistant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartWorkDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StructureTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Wage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommissionId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StructureTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EmployeeCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("EmployeeCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookConnect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FbUserAccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FbUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FbUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("FacebookConnects");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookConnectPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConnectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageAccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("FacebookConnectPages");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookMassMessaging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AudienceFilter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FacebookPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FacebookPageId");

                    b.HasIndex("WriteById");

                    b.ToTable("FacebookMassMessagings");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookMessagingTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exception")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MassMessagingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Opened")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Sent")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MassMessagingId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WriteById");

                    b.ToTable("FacebookMessagingTraces");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AutoConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageAccesstoken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccesstoken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AutoConfigId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("FacebookPages");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookScheduleAppointmentConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoScheduleAppoint")
                        .HasColumnType("bit");

                    b.Property<string>("ContentMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecurringJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleNumber")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("FacebookScheduleAppointmentConfigs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("FacebookTags");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FbPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PSID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FbPageId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("FacebookUserProfiles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookUserProfileTagRel", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserProfileId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FacebookUserProfileTagRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.History", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayrollStructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RegularPay")
                        .HasColumnType("bit");

                    b.Property<string>("SchedulePay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("UseWorkedDayLines")
                        .HasColumnType("bit");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TypeId");

                    b.HasIndex("WriteById");

                    b.ToTable("HrPayrollStructures");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayrollStructureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DefaultResourceCalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultSchedulePay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DefaultStructId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultWorkEntryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DefaultResourceCalendarId");

                    b.HasIndex("DefaultStructId");

                    b.HasIndex("DefaultWorkEntryTypeId");

                    b.HasIndex("WriteById");

                    b.ToTable("HrPayrollStructureTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayslip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountMoveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PayslipRunId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StructId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StructureTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountMoveId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayslipRunId");

                    b.HasIndex("StructId");

                    b.HasIndex("StructureTypeId");

                    b.HasIndex("WriteById");

                    b.ToTable("HrPayslips");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayslipLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SalaryRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid>("SlipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SalaryRuleId");

                    b.HasIndex("SlipId");

                    b.HasIndex("WriteById");

                    b.ToTable("HrPayslipLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayslipRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("HrPayslipRuns");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayslipWorkedDays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NumberOfDays")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NumberOfHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PayslipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkEntryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PayslipId");

                    b.HasIndex("WorkEntryTypeId");

                    b.HasIndex("WriteById");

                    b.ToTable("HrPayslipWorkedDays");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrSalaryRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AmountCodeCompute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AmountFix")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AmountPercentageBase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmountSelect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AppearsOnPayslip")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid>("StructId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StructId");

                    b.HasIndex("WriteById");

                    b.ToTable("HrSalaryRules");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrSalaryRuleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("WriteById");

                    b.ToTable("HrSalaryRuleCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Transient")
                        .HasColumnType("bit");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("IRModels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRModelAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PermCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("PermRead")
                        .HasColumnType("bit");

                    b.Property<bool>("PermUnlink")
                        .HasColumnType("bit");

                    b.Property<bool>("PermWrite")
                        .HasColumnType("bit");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GroupId");

                    b.HasIndex("ModelId");

                    b.HasIndex("WriteById");

                    b.ToTable("IRModelAccesses");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRModelData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Module")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("IRModelDatas");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRModelField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IRModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IRModelId");

                    b.HasIndex("WriteById");

                    b.ToTable("IRModelFields");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ValueBinary")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ValueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ValueDecimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("ValueFloat")
                        .HasColumnType("float");

                    b.Property<int?>("ValueInteger")
                        .HasColumnType("int");

                    b.Property<string>("ValueReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FieldId");

                    b.HasIndex("WriteById");

                    b.ToTable("IRProperties");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Global")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PermCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("PermRead")
                        .HasColumnType("bit");

                    b.Property<bool>("PermUnlink")
                        .HasColumnType("bit");

                    b.Property<bool>("PermWrite")
                        .HasColumnType("bit");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModelId");

                    b.HasIndex("WriteById");

                    b.ToTable("IRRules");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRSequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Implementation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberIncrement")
                        .HasColumnType("int");

                    b.Property<int>("NumberNext")
                        .HasColumnType("int");

                    b.Property<int>("Padding")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("IRSequences");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IrAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatasFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("DbDatas")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("IrAttachments");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IrConfigParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("IrConfigParameters");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IrModuleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Exclusive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("WriteById");

                    b.ToTable("IrModuleCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LaboOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePlanned")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DotKhamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartnerRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DotKhamId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("LaboOrders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LaboOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceSubtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtyInvoiced")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SaleOrderLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ToothCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WarrantyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WarrantyPeriod")
                        .HasColumnType("datetime2");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderLineId");

                    b.HasIndex("ToothCategoryId");

                    b.HasIndex("WriteById");

                    b.ToTable("LaboOrderLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LaboOrderLineToothRel", b =>
                {
                    b.Property<Guid>("LaboLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToothId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LaboLineId", "ToothId");

                    b.HasIndex("ToothId");

                    b.ToTable("LaboOrderLineToothRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LoaiThuChi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInclude")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("LoaiThuChis");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MailMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("MailMessages");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MailMessageResPartnerRel", b =>
                {
                    b.Property<Guid>("MailMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MailMessageId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("MailMessageResPartnerRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MailNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MailMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MailMessageId");

                    b.HasIndex("ResPartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("MailNotifications");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MailTrackingValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MailMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("NewValueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NewValueDecimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NewValueInteger")
                        .HasColumnType("int");

                    b.Property<string>("NewValueText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OldValueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OldValueDicimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OldValueInteger")
                        .HasColumnType("int");

                    b.Property<string>("OldValueText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrackSequence")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MailMessageId");

                    b.HasIndex("WriteById");

                    b.ToTable("MailTrackingValues");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingCampaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FacebookPageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FacebookPageId");

                    b.HasIndex("WriteById");

                    b.ToTable("MarketingCampaigns");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingCampaignActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudienceFilter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IntervalNumber")
                        .HasColumnType("int");

                    b.Property<string>("IntervalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("TriggerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MessageId");

                    b.HasIndex("ParentId");

                    b.HasIndex("WriteById");

                    b.ToTable("MarketingCampaignActivities");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingCampaignActivityFacebookTagRel", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivityId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MarketingCampaignActivityFacebookTagRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("MarketingMessages");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingMessageButton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MessageId");

                    b.HasIndex("WriteById");

                    b.ToTable("MarketingMessageButtons");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Delivery")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exception")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Read")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Sent")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("WriteById");

                    b.ToTable("MarketingTraces");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BirthDay")
                        .HasColumnType("int");

                    b.Property<int?>("BirthMonth")
                        .HasColumnType("int");

                    b.Property<int?>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("CityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Customer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Employee")
                        .HasColumnType("bit");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameNoSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Supplier")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WardCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZaloId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReferralUserId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TitleId");

                    b.HasIndex("WriteById");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CompleteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ParentLeft")
                        .HasColumnType("int");

                    b.Property<int?>("ParentRight")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("WriteById");

                    b.ToTable("PartnerCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerHistoryRel", b =>
                {
                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PartnerId", "HistoryId");

                    b.HasIndex("HistoryId");

                    b.ToTable("PartnerHistoryRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DotkhamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UploadId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DotkhamId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("PartnerImages");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerMapPSIDFacebookPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PSId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("PartnerMapPSIDFacebookPages");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerPartnerCategoryRel", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerPartnerCategoryRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("PartnerSources");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("PartnerTitles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PhieuThuChi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Communication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LoaiThuChiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerReceiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JournalId");

                    b.HasIndex("LoaiThuChiId");

                    b.HasIndex("WriteById");

                    b.ToTable("PhieuThuChis");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CategId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLabo")
                        .HasColumnType("bit");

                    b.Property<string>("KeToaNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("KeToaOK")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LaboPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameGet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameNoSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PurchaseOK")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("SaleOK")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UOMId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UOMPOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UOMId");

                    b.HasIndex("UOMPOId");

                    b.HasIndex("WriteById");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompleteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LaboCateg")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MedicineCateg")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ParentLeft")
                        .HasColumnType("int");

                    b.Property<int?>("ParentRight")
                        .HasColumnType("int");

                    b.Property<bool>("ProductCateg")
                        .HasColumnType("bit");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<bool>("ServiceCateg")
                        .HasColumnType("bit");

                    b.Property<bool>("StepCateg")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("WriteById");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductCompanyRel", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("StandardPrice")
                        .HasColumnType("float");

                    b.HasKey("ProductId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProductCompanyRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductPriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("ProductPriceHistories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductPricelist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CardTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscountPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerCategId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerCategId");

                    b.HasIndex("WriteById");

                    b.ToTable("ProductPricelists");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductPricelistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppliedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Base")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CardTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComputePrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FixedAmountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FixedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("PartnerCategId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PercentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PriceListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PriceMaxMargin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceMinMargin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceRound")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceSurcharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("CategId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerCategId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("ProductPricelistItems");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("ProductSteps");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductUoMRel", b =>
                {
                    b.Property<Guid>("UoMId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UoMId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductUoMRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PromotionProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaximumUseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("PromotionPrograms");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PromotionProgramCompanyRel", b =>
                {
                    b.Property<Guid>("PromotionProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PromotionProgramId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("PromotionProgramCompanyRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PromotionRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscountApplyOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountFixedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DiscountLineProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MinQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DiscountLineProductId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("WriteById");

                    b.ToTable("PromotionRules");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PromotionRuleProductCategoryRel", b =>
                {
                    b.Property<Guid>("RuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiscountLineProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RuleId", "CategId");

                    b.HasIndex("CategId");

                    b.HasIndex("DiscountLineProductId");

                    b.ToTable("PromotionRuleProductCategoryRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PromotionRuleProductRel", b =>
                {
                    b.Property<Guid>("RuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiscountLineProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RuleId", "ProductId");

                    b.HasIndex("DiscountLineProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("PromotionRuleProductRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmountTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountUntaxed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateApprove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePlanned")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartnerRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PickingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RefundOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PickingTypeId");

                    b.HasIndex("RefundOrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PurchaseOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePlanned")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PriceSubtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductUOMId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ProductUOMQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QtyInvoiced")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUOMId");

                    b.HasIndex("WriteById");

                    b.ToTable("PurchaseOrderLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ResBanks");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResCompanyUsersRel", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompanyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ResCompanyUsersRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResConfigSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CompanySharePartner")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompanyShareProduct")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("GroupDiscountPerSOLine")
                        .HasColumnType("bit");

                    b.Property<bool?>("GroupLoyaltyCard")
                        .HasColumnType("bit");

                    b.Property<bool?>("GroupMultiCompany")
                        .HasColumnType("bit");

                    b.Property<bool?>("GroupSaleCouponPromotion")
                        .HasColumnType("bit");

                    b.Property<bool?>("GroupServiceCard")
                        .HasColumnType("bit");

                    b.Property<bool?>("GroupTCare")
                        .HasColumnType("bit");

                    b.Property<bool?>("GroupUoM")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LoyaltyPointExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("ProductListpriceRestrictCompany")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TCareRunAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ResConfigSettings");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ResGroups");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResGroupImpliedRel", b =>
                {
                    b.Property<Guid>("GId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GId", "HId");

                    b.HasIndex("HId");

                    b.ToTable("ResGroupImpliedRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResGroupsUsersRel", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ResGroupsUsersRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResPartnerBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("ResPartnerBanks");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResourceCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("HoursPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ResourceCalendars");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResourceCalendarAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HourFrom")
                        .HasColumnType("float");

                    b.Property<double>("HourTo")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ResourceCalendarAttendances");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResourceCalendarLeaves", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ResourceCalendarLeaves");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Routing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("Routings");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoutingLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoutingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("RoutingId");

                    b.HasIndex("WriteById");

                    b.ToTable("RoutingLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RuleGroupRel", b =>
                {
                    b.Property<Guid>("RuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RuleId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("RuleGroupRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleCoupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleCoupons");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleCouponProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscountApplyOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountFixedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DiscountLineProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("DiscountMaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaximumUseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoApplicability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCodeUsage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RewardDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RewardProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RewardProductQuantity")
                        .HasColumnType("int");

                    b.Property<string>("RewardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RuleDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RuleDateTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RuleMinQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("RuleMinimumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<int?>("ValidityDuration")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DiscountLineProductId");

                    b.HasIndex("RewardProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleCouponPrograms");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleCouponProgramProductRel", b =>
                {
                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProgramId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SaleCouponProgramProductRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmountTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountUntaxed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CodePromoProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsQuotation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PricelistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Residual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CodePromoProgramId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PricelistId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleOrders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmountInvoiced")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountResidual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountToInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnostic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountFixed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRewardLine")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderPartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PriceReduce")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceSubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductUOMId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductUOMQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PromotionProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("QtyInvoiced")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QtyToInvoice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SalesmanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ToothCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CouponId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderPartnerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUOMId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("PromotionProgramId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("ToothCategoryId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleOrderLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLineInvoice2Rel", b =>
                {
                    b.Property<Guid>("OrderLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceLineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderLineId", "InvoiceLineId");

                    b.HasIndex("InvoiceLineId");

                    b.ToTable("SaleOrderLineInvoice2Rels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLineInvoiceRel", b =>
                {
                    b.Property<Guid>("OrderLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceLineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderLineId", "InvoiceLineId");

                    b.HasIndex("InvoiceLineId");

                    b.ToTable("SaleOrderLineInvoiceRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLinePartnerCommission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CommissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SaleOrderLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommissionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SaleOrderLineId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleOrderLinePartnerCommissions");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLinePaymentRel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmountPrepaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleOrderLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SaleOrderLineId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleOrderLinePaymentRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLineToothRel", b =>
                {
                    b.Property<Guid>("SaleLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToothId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SaleLineId", "ToothId");

                    b.HasIndex("ToothId");

                    b.ToTable("SaleOrderLineToothRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderNoCodePromoProgram", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ProgramId");

                    b.HasIndex("ProgramId");

                    b.ToTable("SaleOrderNoCodePromoPrograms");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderPaymentRel", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId", "SaleOrderId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleOrderPaymentRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderServiceCardCardRel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleOrderServiceCardCardRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PointExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleSettings");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SamplePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("SamplePrescriptions");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SamplePrescriptionLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountOfTimes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTimes")
                        .HasColumnType("int");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("UseAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("SamplePrescriptionLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CardTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Residual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SaleLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SaleLineId");

                    b.HasIndex("WriteById");

                    b.ToTable("ServiceCardCards");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmountResidual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("ServiceCardOrders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountFixed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderPartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceSubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductUOMQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SalesmanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderPartnerId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("WriteById");

                    b.ToTable("ServiceCardOrderLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardOrderLineInvoiceRel", b =>
                {
                    b.Property<Guid>("OrderLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceLineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderLineId", "InvoiceLineId");

                    b.HasIndex("InvoiceLineId");

                    b.ToTable("ServiceCardOrderLineInvoiceRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardOrderPaymentRel", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId", "CardOrderId");

                    b.HasIndex("CardOrderId");

                    b.ToTable("ServiceCardOrderPaymentRels");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbrPeriod")
                        .HasColumnType("int");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("ServiceCardTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SetupChamcong", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DifferenceTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HalfStandardWorkHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OneStandardWorkHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("setupChamcongs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompleteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameGet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentLeft")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ParentRight")
                        .HasColumnType("int");

                    b.Property<bool>("ScrapLocation")
                        .HasColumnType("bit");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentLocationId");

                    b.HasIndex("WriteById");

                    b.ToTable("StockLocations");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockMove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExpected")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationDestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PickingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("PriceUnit")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ProductQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductUOMId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductUOMQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PurchaseLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PickingId");

                    b.HasIndex("PickingTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUOMId");

                    b.HasIndex("PurchaseLineId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WriteById");

                    b.ToTable("StockMoves");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockPicking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationDestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PickingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PickingTypeId");

                    b.HasIndex("WriteById");

                    b.ToTable("StockPickings");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockPickingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DefaultLocationDestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DefaultLocationSrcId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IRSequenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReturnPickingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<bool?>("UseCreateLots")
                        .HasColumnType("bit");

                    b.Property<bool?>("UseExistingLots")
                        .HasColumnType("bit");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DefaultLocationDestId");

                    b.HasIndex("DefaultLocationSrcId");

                    b.HasIndex("IRSequenceId");

                    b.HasIndex("ReturnPickingTypeId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WriteById");

                    b.ToTable("StockPickingTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockQuant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NegativeMoveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropagatedFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("NegativeMoveId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropagatedFromId");

                    b.HasIndex("WriteById");

                    b.ToTable("StockQuants");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockQuantMoveRel", b =>
                {
                    b.Property<Guid>("MoveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MoveId", "QuantId");

                    b.HasIndex("QuantId");

                    b.ToTable("StockQuantMoveRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliverySteps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OutTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceptionSteps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ViewLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OutTypeId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ViewLocationId");

                    b.HasIndex("WriteById");

                    b.ToTable("StockWarehouses");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareCampaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GraphXml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecurringJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SheduleStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TCareScenarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TCareScenarioId");

                    b.HasIndex("WriteById");

                    b.ToTable("TCareCampaigns");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareMessaging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChannelSocialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChannelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IntervalNumber")
                        .HasColumnType("int");

                    b.Property<string>("IntervalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MethodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TCareCampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSocialId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TCareCampaignId");

                    b.HasIndex("WriteById");

                    b.ToTable("TCareMessagings");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareMessagingTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChannelSocialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Delivery")
                        .HasColumnType("datetime2");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Exception")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Opened")
                        .HasColumnType("datetime2");

                    b.Property<string>("PSID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Sent")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TCareCampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSocialId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TCareCampaignId");

                    b.HasIndex("WriteById");

                    b.ToTable("TCareMessingTraces");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ValueDecimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("ValueDouble")
                        .HasColumnType("float");

                    b.Property<int?>("ValueInteger")
                        .HasColumnType("int");

                    b.Property<string>("ValueReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RuleId");

                    b.HasIndex("WriteById");

                    b.ToTable("TCareProperties");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("TCareRules");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareScenario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("TCareScenarios");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ToaThuoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnostic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DotKhamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DotKhamId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("ToaThuocs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ToaThuocLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountOfTimes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTimes")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<Guid>("ToaThuocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UseAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("ToaThuocId");

                    b.HasIndex("WriteById");

                    b.ToTable("ToaThuocLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Tooth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViTriHam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("Teeth");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ToothCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ToothCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeasureType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rounding")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UOMType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("UoMs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoMCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeasureType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("UoMCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WorkEntryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHasTimeKeeping")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoundDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoundDaysType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("WorkEntryTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ZaloOAConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AutoSendBirthdayMessage")
                        .HasColumnType("bit");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthdayMessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ZaloOAConfigs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountAccount", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountAccountType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountAccountType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountFinancialReport", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountFinancialReport", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountFinancialReportAccountAccountTypeRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountAccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AccountFinancialReport", "FinancialReport")
                        .WithMany("FinancialReportAccountTypeRels")
                        .HasForeignKey("FinancialReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountFullReconcile", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountMove", "ExchangeMove")
                        .WithMany()
                        .HasForeignKey("ExchangeMoveId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoice", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AccountMove", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "RefundInvoice")
                        .WithMany()
                        .HasForeignKey("RefundInvoiceId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceAccountMoveLineRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "AccountInvoice")
                        .WithMany("PaymentMoveLines")
                        .HasForeignKey("AccountInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AccountMoveLine", "MoveLine")
                        .WithMany()
                        .HasForeignKey("MoveLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.LaboOrderLine", "LaboLine")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("LaboLineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.PurchaseOrderLine", "PurchaseLine")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("PurchaseLineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ToothCategory", "ToothCategory")
                        .WithMany()
                        .HasForeignKey("ToothCategoryId");

                    b.HasOne("ApplicationCore.Entities.Tooth", "Tooth")
                        .WithMany()
                        .HasForeignKey("ToothId");

                    b.HasOne("ApplicationCore.Entities.UoM", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceLineToothRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountInvoiceLine", "InvoiceLine")
                        .WithMany("AccountInvoiceLineToothRels")
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Tooth", "Tooth")
                        .WithMany()
                        .HasForeignKey("ToothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoicePaymentRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany("AccountInvoicePaymentRels")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AccountPayment", "Payment")
                        .WithMany("AccountInvoicePaymentRels")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountJournal", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ResPartnerBank", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountAccount", "DefaultCreditAccount")
                        .WithMany()
                        .HasForeignKey("DefaultCreditAccountId");

                    b.HasOne("ApplicationCore.Entities.AccountAccount", "DefaultDebitAccount")
                        .WithMany()
                        .HasForeignKey("DefaultDebitAccountId");

                    b.HasOne("ApplicationCore.Entities.IRSequence", "RefundSequence")
                        .WithMany()
                        .HasForeignKey("RefundSequenceId");

                    b.HasOne("ApplicationCore.Entities.IRSequence", "Sequence")
                        .WithMany()
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountMove", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "InvoiceUser")
                        .WithMany()
                        .HasForeignKey("InvoiceUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountMoveLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountFullReconcile", "FullReconcile")
                        .WithMany("ReconciledLines")
                        .HasForeignKey("FullReconcileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.LaboOrderLine", "LaboLine")
                        .WithMany("MoveLines")
                        .HasForeignKey("LaboLineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.AccountMove", "Move")
                        .WithMany("Lines")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany("AMoveLines")
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.AccountPayment", "Payment")
                        .WithMany("MoveLines")
                        .HasForeignKey("PaymentId");

                    b.HasOne("ApplicationCore.Entities.PhieuThuChi", "PhieuThuChi")
                        .WithMany("MoveLines")
                        .HasForeignKey("PhieuThuChiId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.UoM", "ProductUoM")
                        .WithMany()
                        .HasForeignKey("ProductUoMId");

                    b.HasOne("ApplicationCore.Entities.PurchaseOrderLine", "PurchaseLine")
                        .WithMany("MoveLines")
                        .HasForeignKey("PurchaseLineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "Salesman")
                        .WithMany()
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountMovePaymentRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountMove", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AccountPayment", "Payment")
                        .WithMany("AccountMovePaymentRels")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountPartialReconcile", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountMoveLine", "CreditMove")
                        .WithMany("MatchedDebits")
                        .HasForeignKey("CreditMoveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AccountMoveLine", "DebitMove")
                        .WithMany("MatchedCredits")
                        .HasForeignKey("DebitMoveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AccountFullReconcile", "FullReconcile")
                        .WithMany("PartialReconciles")
                        .HasForeignKey("FullReconcileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountPayment", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");

                    b.HasOne("ApplicationCore.Entities.AccountAccount", "WriteoffAccount")
                        .WithMany()
                        .HasForeignKey("WriteoffAccountId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountRegisterPayment", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountRegisterPaymentInvoiceRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AccountRegisterPayment", "Payment")
                        .WithMany("AccountRegisterPaymentInvoiceRels")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationRoleFunction", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationRole", "Role")
                        .WithMany("Functions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationUser", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.FacebookPage", "FacebookPage")
                        .WithMany()
                        .HasForeignKey("FacebookPageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.Appointment", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Employee", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("ApplicationCore.Entities.DotKham", "DotKham")
                        .WithMany()
                        .HasForeignKey("DotKhamId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany("Appointments")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AppointmentMailMessageRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentMailMessageRels")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.MailMessage", "MailMessage")
                        .WithMany()
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.CardCard", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.CardType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.CardType", "UpgradeType")
                        .WithMany()
                        .HasForeignKey("UpgradeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CardHistory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CardCard", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.CardType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CardType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ProductPricelist", "Pricelist")
                        .WithMany()
                        .HasForeignKey("PricelistId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ChamCong", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Employee", "Employee")
                        .WithMany("ChamCongs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.WorkEntryType", "WorkEntryType")
                        .WithMany("ChamCongs")
                        .HasForeignKey("WorkEntryTypeId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Commission", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CommissionProductRule", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ProductCategory", "Categ")
                        .WithMany()
                        .HasForeignKey("CategId");

                    b.HasOne("ApplicationCore.Entities.Commission", "Commission")
                        .WithMany("CommissionProductRules")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CommissionSettlement", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.AccountPayment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("ApplicationCore.Entities.SaleOrderLine", "SaleOrderLine")
                        .WithMany()
                        .HasForeignKey("SaleOrderLineId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountAccount", "AccountExpense")
                        .WithMany()
                        .HasForeignKey("AccountExpenseId");

                    b.HasOne("ApplicationCore.Entities.AccountAccount", "AccountIncome")
                        .WithMany()
                        .HasForeignKey("AccountIncomeId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKham", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("ApplicationCore.Entities.Employee", "Assistant")
                        .WithMany()
                        .HasForeignKey("AssistantId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "AssistantUser")
                        .WithMany()
                        .HasForeignKey("AssistantUserId");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Employee", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany("DotKhams")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "SaleOrder")
                        .WithMany("DotKhams")
                        .HasForeignKey("SaleOrderId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKhamLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.DotKham", "DotKham")
                        .WithMany("Lines")
                        .HasForeignKey("DotKhamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.Routing", "Routing")
                        .WithMany()
                        .HasForeignKey("RoutingId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKhamLineOperation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.DotKhamLine", "Line")
                        .WithMany("Operations")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKhamStep", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.DotKham", "DotKham")
                        .WithMany("Steps")
                        .HasForeignKey("DotKhamId");

                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoicesId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.SaleOrderLine", "SaleLine")
                        .WithMany("DotKhamSteps")
                        .HasForeignKey("SaleLineId");

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "SaleOrder")
                        .WithMany()
                        .HasForeignKey("SaleOrderId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Employee", b =>
                {
                    b.HasOne("ApplicationCore.Entities.EmployeeCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ApplicationCore.Entities.Commission", "Commission")
                        .WithMany()
                        .HasForeignKey("CommissionId");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.HrPayrollStructureType", "StructureType")
                        .WithMany()
                        .HasForeignKey("StructureTypeId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EmployeeCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookConnect", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookConnectPage", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FacebookConnect", "Connect")
                        .WithMany("Pages")
                        .HasForeignKey("ConnectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookMassMessaging", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.FacebookPage", "FacebookPage")
                        .WithMany()
                        .HasForeignKey("FacebookPageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookMessagingTrace", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.FacebookMassMessaging", "MassMessaging")
                        .WithMany("Traces")
                        .HasForeignKey("MassMessagingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.FacebookUserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookPage", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FacebookScheduleAppointmentConfig", "AutoConfig")
                        .WithMany()
                        .HasForeignKey("AutoConfigId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookScheduleAppointmentConfig", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookTag", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookUserProfile", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.FacebookPage", "FbPage")
                        .WithMany()
                        .HasForeignKey("FbPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookUserProfileTagRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FacebookTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.FacebookUserProfile", "UserProfile")
                        .WithMany("TagRels")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.History", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayrollStructure", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.HrPayrollStructureType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayrollStructureType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ResourceCalendar", "DefaultResourceCalendar")
                        .WithMany()
                        .HasForeignKey("DefaultResourceCalendarId");

                    b.HasOne("ApplicationCore.Entities.HrPayrollStructure", "DefaultStruct")
                        .WithMany()
                        .HasForeignKey("DefaultStructId");

                    b.HasOne("ApplicationCore.Entities.WorkEntryType", "DefaultWorkEntryType")
                        .WithMany()
                        .HasForeignKey("DefaultWorkEntryTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayslip", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountMove", "AccountMove")
                        .WithMany()
                        .HasForeignKey("AccountMoveId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.HrPayslipRun", "PayslipRun")
                        .WithMany("Slips")
                        .HasForeignKey("PayslipRunId");

                    b.HasOne("ApplicationCore.Entities.HrPayrollStructure", "Struct")
                        .WithMany()
                        .HasForeignKey("StructId");

                    b.HasOne("ApplicationCore.Entities.HrPayrollStructureType", "StructureType")
                        .WithMany()
                        .HasForeignKey("StructureTypeId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayslipLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.HrSalaryRuleCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.HrSalaryRule", "SalaryRule")
                        .WithMany()
                        .HasForeignKey("SalaryRuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.HrPayslip", "Slip")
                        .WithMany("Lines")
                        .HasForeignKey("SlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayslipRun", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrPayslipWorkedDays", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.HrPayslip", "Payslip")
                        .WithMany("WorkedDaysLines")
                        .HasForeignKey("PayslipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.WorkEntryType", "WorkEntryType")
                        .WithMany()
                        .HasForeignKey("WorkEntryTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrSalaryRule", b =>
                {
                    b.HasOne("ApplicationCore.Entities.HrSalaryRuleCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.HrPayrollStructure", "Struct")
                        .WithMany("Rules")
                        .HasForeignKey("StructId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.HrSalaryRuleCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.HrSalaryRuleCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRModel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRModelAccess", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ResGroup", "Group")
                        .WithMany("ModelAccesses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.IRModel", "Model")
                        .WithMany("ModelAccesses")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRModelData", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRModelField", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.IRModel", "IRModel")
                        .WithMany()
                        .HasForeignKey("IRModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRProperty", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.IRModelField", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRRule", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.IRModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRSequence", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IrAttachment", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IrConfigParameter", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IrModuleCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.IrModuleCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LaboOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("ApplicationCore.Entities.DotKham", "DotKham")
                        .WithMany()
                        .HasForeignKey("DotKhamId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "SaleOrder")
                        .WithMany()
                        .HasForeignKey("SaleOrderId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LaboOrderLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("ApplicationCore.Entities.LaboOrder", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.SaleOrderLine", "SaleOrderLine")
                        .WithMany()
                        .HasForeignKey("SaleOrderLineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ToothCategory", "ToothCategory")
                        .WithMany()
                        .HasForeignKey("ToothCategoryId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LaboOrderLineToothRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.LaboOrderLine", "LaboLine")
                        .WithMany("LaboOrderLineToothRels")
                        .HasForeignKey("LaboLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Tooth", "Tooth")
                        .WithMany()
                        .HasForeignKey("ToothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.LoaiThuChi", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MailMessage", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Partner", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MailMessageResPartnerRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.MailMessage", "MailMessage")
                        .WithMany("Recipients")
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.MailNotification", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.MailMessage", "MailMessage")
                        .WithMany("Notifications")
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "ResPartner")
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MailTrackingValue", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.MailMessage", "MailMessage")
                        .WithMany("TrackingValues")
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingCampaign", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.FacebookPage", "FacebookPage")
                        .WithMany()
                        .HasForeignKey("FacebookPageId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingCampaignActivity", b =>
                {
                    b.HasOne("ApplicationCore.Entities.MarketingCampaign", "Campaign")
                        .WithMany("Activities")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.MarketingMessage", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("ApplicationCore.Entities.MarketingCampaignActivity", "Parent")
                        .WithMany("ActivityChilds")
                        .HasForeignKey("ParentId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingCampaignActivityFacebookTagRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.MarketingCampaignActivity", "Activity")
                        .WithMany("TagRels")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.FacebookTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingMessage", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingMessageButton", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.MarketingMessage", "Message")
                        .WithMany("Buttons")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MarketingTrace", b =>
                {
                    b.HasOne("ApplicationCore.Entities.MarketingCampaignActivity", "Activity")
                        .WithMany("Traces")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.FacebookUserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Partner", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "ReferralUser")
                        .WithMany()
                        .HasForeignKey("ReferralUserId");

                    b.HasOne("ApplicationCore.Entities.PartnerSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("ApplicationCore.Entities.PartnerTitle", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.PartnerCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerHistoryRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.History", "History")
                        .WithMany("PartnerHistoryRels")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany("PartnerHistoryRels")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerImage", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.DotKham", "DotKham")
                        .WithMany("DotKhamImages")
                        .HasForeignKey("DotkhamId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany("PartnerImages")
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerMapPSIDFacebookPage", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerPartnerCategoryRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.PartnerCategory", "Category")
                        .WithMany("PartnerPartnerCategoryRels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany("PartnerPartnerCategoryRels")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerSource", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerTitle", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PhieuThuChi", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.LoaiThuChi", "LoaiThuChi")
                        .WithMany()
                        .HasForeignKey("LoaiThuChiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ProductCategory", "Categ")
                        .WithMany()
                        .HasForeignKey("CategId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.UoM", "UOM")
                        .WithMany()
                        .HasForeignKey("UOMId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.UoM", "UOMPO")
                        .WithMany()
                        .HasForeignKey("UOMPOId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ProductCategory", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductCompanyRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("ProductCompanyRels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductPriceHistory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("PriceHistories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductPricelist", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CardType", "CardType")
                        .WithMany()
                        .HasForeignKey("CardTypeId");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.PartnerCategory", "PartnerCateg")
                        .WithMany()
                        .HasForeignKey("PartnerCategId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductPricelistItem", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CardType", "CardType")
                        .WithMany()
                        .HasForeignKey("CardTypeId");

                    b.HasOne("ApplicationCore.Entities.ProductCategory", "Categ")
                        .WithMany()
                        .HasForeignKey("CategId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.PartnerCategory", "PartnerCateg")
                        .WithMany()
                        .HasForeignKey("PartnerCategId");

                    b.HasOne("ApplicationCore.Entities.ProductPricelist", "PriceList")
                        .WithMany("Items")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductStep", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("Steps")
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductUoMRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("ProductUoMRels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.UoM", "UoM")
                        .WithMany("ProductUoMRels")
                        .HasForeignKey("UoMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.PromotionProgram", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PromotionProgramCompanyRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.PromotionProgram", "PromotionProgram")
                        .WithMany("ProgramCompanyRels")
                        .HasForeignKey("PromotionProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.PromotionRule", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Product", "DiscountLineProduct")
                        .WithMany()
                        .HasForeignKey("DiscountLineProductId");

                    b.HasOne("ApplicationCore.Entities.PromotionProgram", "Program")
                        .WithMany("Rules")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PromotionRuleProductCategoryRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ProductCategory", "Categ")
                        .WithMany()
                        .HasForeignKey("CategId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Product", "DiscountLineProduct")
                        .WithMany()
                        .HasForeignKey("DiscountLineProductId");

                    b.HasOne("ApplicationCore.Entities.PromotionRule", "Rule")
                        .WithMany("RuleCategoryRels")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.PromotionRuleProductRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "DiscountLineProduct")
                        .WithMany()
                        .HasForeignKey("DiscountLineProductId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.PromotionRule", "Rule")
                        .WithMany("RuleProductRels")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.StockPickingType", "PickingType")
                        .WithMany()
                        .HasForeignKey("PickingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.PurchaseOrder", "RefundOrder")
                        .WithMany()
                        .HasForeignKey("RefundOrderId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PurchaseOrderLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.PurchaseOrder", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.UoM", "ProductUOM")
                        .WithMany()
                        .HasForeignKey("ProductUOMId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResBank", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResCompanyUsersRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany("ResCompanyUsersRels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResConfigSettings", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResGroup", b =>
                {
                    b.HasOne("ApplicationCore.Entities.IrModuleCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResGroupImpliedRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ResGroup", "G")
                        .WithMany("ImpliedRels")
                        .HasForeignKey("GId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ResGroup", "H")
                        .WithMany()
                        .HasForeignKey("HId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResGroupsUsersRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ResGroup", "Group")
                        .WithMany("ResGroupsUsersRels")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany("ResGroupsUsersRels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResPartnerBank", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ResBank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResourceCalendar", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResourceCalendarAttendance", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ResourceCalendar", "Calendar")
                        .WithMany("Attendances")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ResourceCalendarLeaves", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ResourceCalendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Routing", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoutingLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.Routing", "Routing")
                        .WithMany("Lines")
                        .HasForeignKey("RoutingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RuleGroupRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ResGroup", "Group")
                        .WithMany("RuleGroupRels")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.IRRule", "Rule")
                        .WithMany("RuleGroupRels")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleCoupon", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "Order")
                        .WithMany("GeneratedCoupons")
                        .HasForeignKey("OrderId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.SaleCouponProgram", "Program")
                        .WithMany("Coupons")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "SaleOrder")
                        .WithMany("AppliedCoupons")
                        .HasForeignKey("SaleOrderId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleCouponProgram", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Product", "DiscountLineProduct")
                        .WithMany()
                        .HasForeignKey("DiscountLineProductId");

                    b.HasOne("ApplicationCore.Entities.Product", "RewardProduct")
                        .WithMany()
                        .HasForeignKey("RewardProductId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleCouponProgramProductRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.SaleCouponProgram", "Program")
                        .WithMany("DiscountSpecificProducts")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.CardCard", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("ApplicationCore.Entities.SaleCouponProgram", "CodePromoProgram")
                        .WithMany()
                        .HasForeignKey("CodePromoProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ProductPricelist", "Pricelist")
                        .WithMany()
                        .HasForeignKey("PricelistId");

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.SaleCoupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "OrderPartner")
                        .WithMany()
                        .HasForeignKey("OrderPartnerId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.UoM", "ProductUOM")
                        .WithMany()
                        .HasForeignKey("ProductUOMId");

                    b.HasOne("ApplicationCore.Entities.PromotionProgram", "Promotion")
                        .WithMany("SaleLines")
                        .HasForeignKey("PromotionId");

                    b.HasOne("ApplicationCore.Entities.SaleCouponProgram", "PromotionProgram")
                        .WithMany("SaleLines")
                        .HasForeignKey("PromotionProgramId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "Salesman")
                        .WithMany()
                        .HasForeignKey("SalesmanId");

                    b.HasOne("ApplicationCore.Entities.ToothCategory", "ToothCategory")
                        .WithMany()
                        .HasForeignKey("ToothCategoryId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLineInvoice2Rel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountMoveLine", "InvoiceLine")
                        .WithMany("SaleLineRels")
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.SaleOrderLine", "OrderLine")
                        .WithMany("SaleOrderLineInvoice2Rels")
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLineInvoiceRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountInvoiceLine", "InvoiceLine")
                        .WithMany("SaleLines")
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.SaleOrderLine", "OrderLine")
                        .WithMany("SaleOrderLineInvoiceRels")
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLinePartnerCommission", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Commission", "Commission")
                        .WithMany()
                        .HasForeignKey("CommissionId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.SaleOrderLine", "SaleOrderLine")
                        .WithMany("PartnerCommissions")
                        .HasForeignKey("SaleOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLinePaymentRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountPayment", "Payment")
                        .WithMany("SaleOrderLinePaymentRels")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.SaleOrderLine", "SaleOrderLine")
                        .WithMany("SaleOrderLinePaymentRels")
                        .HasForeignKey("SaleOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLineToothRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.SaleOrderLine", "SaleLine")
                        .WithMany("SaleOrderLineToothRels")
                        .HasForeignKey("SaleLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Tooth", "Tooth")
                        .WithMany("SaleLineToothRels")
                        .HasForeignKey("ToothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderNoCodePromoProgram", b =>
                {
                    b.HasOne("ApplicationCore.Entities.SaleOrder", "Order")
                        .WithMany("NoCodePromoPrograms")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.SaleCouponProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderPaymentRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountPayment", "Payment")
                        .WithMany("SaleOrderPaymentRels")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "SaleOrder")
                        .WithMany()
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderServiceCardCardRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ServiceCardCard", "Card")
                        .WithMany("SaleOrderCardRels")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderCardRels")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleSettings", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SamplePrescription", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SamplePrescriptionLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.SamplePrescription", "Prescription")
                        .WithMany("Lines")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardCard", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ServiceCardType", "CardType")
                        .WithMany()
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.ServiceCardOrderLine", "SaleLine")
                        .WithMany("Cards")
                        .HasForeignKey("SaleLineId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardOrderLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ServiceCardType", "CardType")
                        .WithMany()
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ServiceCardOrder", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "OrderPartner")
                        .WithMany()
                        .HasForeignKey("OrderPartnerId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "Salesman")
                        .WithMany()
                        .HasForeignKey("SalesmanId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardOrderLineInvoiceRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountMoveLine", "InvoiceLine")
                        .WithMany("CardOrderLineRels")
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ServiceCardOrderLine", "OrderLine")
                        .WithMany("OrderLineInvoiceRels")
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardOrderPaymentRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ServiceCardOrder", "CardOrder")
                        .WithMany()
                        .HasForeignKey("CardOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.AccountPayment", "Payment")
                        .WithMany("CardOrderPaymentRels")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceCardType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SetupChamcong", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockLocation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.StockLocation", "ParentLocation")
                        .WithMany("Childs")
                        .HasForeignKey("ParentLocationId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockMove", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.StockLocation", "LocationDest")
                        .WithMany()
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.StockLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.StockPicking", "Picking")
                        .WithMany("MoveLines")
                        .HasForeignKey("PickingId");

                    b.HasOne("ApplicationCore.Entities.StockPickingType", "PickingType")
                        .WithMany()
                        .HasForeignKey("PickingTypeId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.UoM", "ProductUOM")
                        .WithMany()
                        .HasForeignKey("ProductUOMId");

                    b.HasOne("ApplicationCore.Entities.PurchaseOrderLine", "PurchaseLine")
                        .WithMany()
                        .HasForeignKey("PurchaseLineId");

                    b.HasOne("ApplicationCore.Entities.StockWarehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockPicking", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.StockLocation", "LocationDest")
                        .WithMany()
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.StockLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.StockPickingType", "PickingType")
                        .WithMany()
                        .HasForeignKey("PickingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockPickingType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.StockLocation", "DefaultLocationDest")
                        .WithMany()
                        .HasForeignKey("DefaultLocationDestId");

                    b.HasOne("ApplicationCore.Entities.StockLocation", "DefaultLocationSrc")
                        .WithMany()
                        .HasForeignKey("DefaultLocationSrcId");

                    b.HasOne("ApplicationCore.Entities.IRSequence", "IRSequence")
                        .WithMany()
                        .HasForeignKey("IRSequenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.StockPickingType", "ReturnPickingType")
                        .WithMany()
                        .HasForeignKey("ReturnPickingTypeId");

                    b.HasOne("ApplicationCore.Entities.StockWarehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockQuant", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.StockLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.StockMove", "NegativeMove")
                        .WithMany()
                        .HasForeignKey("NegativeMoveId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("StockQuants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.StockQuant", "PropagatedFrom")
                        .WithMany()
                        .HasForeignKey("PropagatedFromId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockQuantMoveRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.StockMove", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.StockQuant", "Quant")
                        .WithMany("StockQuantMoveRels")
                        .HasForeignKey("QuantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.StockWarehouse", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.StockPickingType", "InType")
                        .WithMany()
                        .HasForeignKey("InTypeId");

                    b.HasOne("ApplicationCore.Entities.StockLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.StockPickingType", "OutType")
                        .WithMany()
                        .HasForeignKey("OutTypeId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.StockLocation", "ViewLocation")
                        .WithMany()
                        .HasForeignKey("ViewLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareCampaign", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.TCareScenario", "TCareScenario")
                        .WithMany("Campaigns")
                        .HasForeignKey("TCareScenarioId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareMessaging", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FacebookPage", "ChannelSocial")
                        .WithMany()
                        .HasForeignKey("ChannelSocialId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.TCareCampaign", "TCareCampaign")
                        .WithMany()
                        .HasForeignKey("TCareCampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareMessagingTrace", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FacebookPage", "ChannelSocial")
                        .WithMany()
                        .HasForeignKey("ChannelSocialId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationCore.Entities.TCareCampaign", "TCareCampaign")
                        .WithMany("Traces")
                        .HasForeignKey("TCareCampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareProperty", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.TCareRule", "Rule")
                        .WithMany("Properties")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareRule", b =>
                {
                    b.HasOne("ApplicationCore.Entities.TCareCampaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TCareScenario", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ToaThuoc", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.DotKham", "DotKham")
                        .WithMany()
                        .HasForeignKey("DotKhamId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ToaThuocLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ToaThuoc", "ToaThuoc")
                        .WithMany("Lines")
                        .HasForeignKey("ToaThuocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Tooth", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ToothCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ToothCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoM", b =>
                {
                    b.HasOne("ApplicationCore.Entities.UoMCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoMCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.WorkEntryType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ZaloOAConfig", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
