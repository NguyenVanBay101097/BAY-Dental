// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20190717033705_F14")]
    partial class F14
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entities.AccountAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("InternalType");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<bool>("Reconcile");

                    b.Property<Guid>("UserTypeId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UserTypeId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountAccounts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountAccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool>("IncludeInitialBalance");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountAccountTypes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountFullReconcile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<Guid?>("ExchangeMoveId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ExchangeMoveId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountFullReconciles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<decimal>("AmountTax");

                    b.Property<decimal>("AmountTotal");

                    b.Property<decimal>("AmountTotalSigned");

                    b.Property<decimal>("AmountUntaxed");

                    b.Property<string>("Comment");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateDue");

                    b.Property<DateTime?>("DateInvoice");

                    b.Property<Guid>("JournalId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<Guid?>("MoveId");

                    b.Property<string>("MoveName");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<string>("Origin");

                    b.Property<Guid>("PartnerId");

                    b.Property<bool>("Reconciled");

                    b.Property<string>("Reference");

                    b.Property<Guid?>("RefundInvoiceId");

                    b.Property<decimal>("Residual");

                    b.Property<decimal>("ResidualSigned");

                    b.Property<bool>("Sent");

                    b.Property<string>("State");

                    b.Property<string>("Type");

                    b.Property<string>("UserId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JournalId");

                    b.HasIndex("MoveId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("RefundInvoiceId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountInvoices");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceAccountMoveLineRel", b =>
                {
                    b.Property<Guid>("AccountInvoiceId");

                    b.Property<Guid>("MoveLineId");

                    b.HasKey("AccountInvoiceId", "MoveLineId");

                    b.HasIndex("MoveLineId");

                    b.ToTable("AccountInvoiceAccountMoveLineRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("Diagnostic");

                    b.Property<decimal>("Discount");

                    b.Property<Guid?>("EmployeeId");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<string>("Origin");

                    b.Property<Guid?>("PartnerId");

                    b.Property<decimal>("PriceSubTotal");

                    b.Property<decimal>("PriceSubTotalSigned");

                    b.Property<decimal>("PriceUnit");

                    b.Property<Guid?>("ProductId");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("Sequence");

                    b.Property<Guid?>("ToothCategoryId");

                    b.Property<Guid?>("UoMId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ToothCategoryId");

                    b.HasIndex("UoMId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountInvoiceLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceLineToothRel", b =>
                {
                    b.Property<Guid>("InvoiceLineId");

                    b.Property<Guid>("ToothId");

                    b.HasKey("InvoiceLineId", "ToothId");

                    b.HasIndex("ToothId");

                    b.ToTable("AccountInvoiceLineToothRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoicePaymentRel", b =>
                {
                    b.Property<Guid>("PaymentId");

                    b.Property<Guid>("InvoiceId");

                    b.HasKey("PaymentId", "InvoiceId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("AccountInvoicePaymentRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountJournal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool>("DedicatedRefund");

                    b.Property<Guid?>("DefaultCreditAccountId");

                    b.Property<Guid?>("DefaultDebitAccountId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("RefundSequenceId");

                    b.Property<Guid>("SequenceId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<bool>("UpdatePosted");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DefaultCreditAccountId");

                    b.HasIndex("DefaultDebitAccountId");

                    b.HasIndex("RefundSequenceId");

                    b.HasIndex("SequenceId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountJournals");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountMove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<Guid>("JournalId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Narration");

                    b.Property<Guid?>("PartnerId");

                    b.Property<string>("Ref");

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JournalId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountMoves");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountMoveLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<decimal>("AmountResidual");

                    b.Property<decimal>("Balance");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<decimal>("Credit");

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime>("DateMaturity");

                    b.Property<decimal>("Debit");

                    b.Property<Guid?>("FullReconcileId");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid?>("JournalId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<Guid>("MoveId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PartnerId");

                    b.Property<Guid?>("PaymentId");

                    b.Property<Guid?>("ProductId");

                    b.Property<Guid?>("ProductUoMId");

                    b.Property<decimal?>("Quantity");

                    b.Property<bool>("Reconciled");

                    b.Property<string>("Ref");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FullReconcileId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("JournalId");

                    b.HasIndex("MoveId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUoMId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountMoveLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountPartialReconcile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<Guid>("CreditMoveId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<Guid>("DebitMoveId");

                    b.Property<Guid?>("FullReconcileId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreditMoveId");

                    b.HasIndex("DebitMoveId");

                    b.HasIndex("FullReconcileId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountPartialReconciles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("Communication");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<Guid>("JournalId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PartnerId");

                    b.Property<string>("PartnerType");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("PaymentDifferenceHandling");

                    b.Property<string>("PaymentType")
                        .IsRequired();

                    b.Property<string>("State");

                    b.Property<string>("WriteById");

                    b.Property<Guid?>("WriteoffAccountId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JournalId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.HasIndex("WriteoffAccountId");

                    b.ToTable("AccountPayments");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountRegisterPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("Communication");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<Guid>("JournalId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<Guid?>("PartnerId");

                    b.Property<string>("PartnerType");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("PaymentType")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JournalId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("AccountRegisterPayments");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountRegisterPaymentInvoiceRel", b =>
                {
                    b.Property<Guid>("PaymentId");

                    b.Property<Guid>("InvoiceId");

                    b.HasKey("PaymentId", "InvoiceId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("AccountRegisterPaymentInvoiceRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<Guid>("PartnerId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PartnerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountExpenseId");

                    b.Property<Guid?>("AccountIncomeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("PartnerId");

                    b.Property<DateTime?>("PeriodLockDate");

                    b.Property<string>("Phone");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("AccountExpenseId");

                    b.HasIndex("AccountIncomeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKham", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AssistantId");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<Guid>("DoctorId");

                    b.Property<Guid>("InvoiceId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<Guid?>("PartnerId");

                    b.Property<string>("State");

                    b.Property<string>("UserId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("AssistantId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("DotKhams");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKhamLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<Guid>("DotKhamId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ProductId");

                    b.Property<string>("State");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DotKhamId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("DotKhamLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKhamLineOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<Guid?>("LineId");

                    b.Property<string>("Name");

                    b.Property<string>("State");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LineId");

                    b.HasIndex("WriteById");

                    b.ToTable("DotKhamLineOperations");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRSequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("Implementation");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberIncrement");

                    b.Property<int>("NumberNext");

                    b.Property<int>("Padding");

                    b.Property<string>("Prefix");

                    b.Property<string>("Suffix");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("IRSequences");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Barcode");

                    b.Property<int?>("BirthDay");

                    b.Property<int?>("BirthMonth");

                    b.Property<int?>("BirthYear");

                    b.Property<string>("CityCode");

                    b.Property<string>("CityName");

                    b.Property<string>("Comment");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<bool>("Customer");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("DisplayName");

                    b.Property<string>("DistrictCode");

                    b.Property<string>("DistrictName");

                    b.Property<string>("Email");

                    b.Property<bool>("Employee");

                    b.Property<string>("Gender");

                    b.Property<string>("JobTitle");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("MedicalHistory");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameNoSign");

                    b.Property<string>("Phone");

                    b.Property<string>("Ref");

                    b.Property<string>("Street");

                    b.Property<bool>("Supplier");

                    b.Property<string>("WardCode");

                    b.Property<string>("WardName");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("PartnerCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerPartnerCategoryRel", b =>
                {
                    b.Property<Guid>("CategoryId");

                    b.Property<Guid>("PartnerId");

                    b.HasKey("CategoryId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerPartnerCategoryRel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CategId");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("DefaultCode");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameGet");

                    b.Property<bool>("PurchaseOK");

                    b.Property<bool>("SaleOK");

                    b.Property<string>("Type");

                    b.Property<Guid>("UOMId");

                    b.Property<Guid>("UOMPOId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CategId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UOMId");

                    b.HasIndex("UOMPOId");

                    b.HasIndex("WriteById");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Routing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<Guid>("ProductId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("WriteById");

                    b.ToTable("Routings");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoutingLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<Guid>("RoutingId");

                    b.Property<int>("Sequence");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoutingId");

                    b.HasIndex("WriteById");

                    b.ToTable("RoutingLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AmountTax");

                    b.Property<decimal?>("AmountTotal");

                    b.Property<decimal?>("AmountUntaxed");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime>("DateOrder");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<Guid>("PartnerId");

                    b.Property<string>("State");

                    b.Property<string>("UserId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleOrders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<decimal>("Discount");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid?>("OrderPartnerId");

                    b.Property<decimal>("PriceSubTotal");

                    b.Property<decimal>("PriceTax");

                    b.Property<decimal>("PriceTotal");

                    b.Property<decimal>("PriceUnit");

                    b.Property<Guid?>("ProductId");

                    b.Property<decimal>("ProductUOMQty");

                    b.Property<string>("SalesmanId");

                    b.Property<string>("State");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderPartnerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleOrderLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Tooth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Position");

                    b.Property<string>("ViTriHam");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("Teeth");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ToothCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ToothCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<decimal>("Factor");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("MeasureType");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Rounding");

                    b.Property<string>("UOMType")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("UoMs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoMCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("MeasureType")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("UoMCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountAccount", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountAccountType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountAccountType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountFullReconcile", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountMove", "ExchangeMove")
                        .WithMany()
                        .HasForeignKey("ExchangeMoveId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoice", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.AccountMove", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "RefundInvoice")
                        .WithMany()
                        .HasForeignKey("RefundInvoiceId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceAccountMoveLineRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "AccountInvoice")
                        .WithMany("PaymentMoveLines")
                        .HasForeignKey("AccountInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.AccountMoveLine", "MoveLine")
                        .WithMany()
                        .HasForeignKey("MoveLineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.ToothCategory", "ToothCategory")
                        .WithMany()
                        .HasForeignKey("ToothCategoryId");

                    b.HasOne("ApplicationCore.Entities.UoM", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoiceLineToothRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountInvoiceLine", "InvoiceLine")
                        .WithMany("AccountInvoiceLineToothRels")
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Tooth", "Tooth")
                        .WithMany()
                        .HasForeignKey("ToothId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInvoicePaymentRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany("AccountInvoicePaymentRels")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.AccountPayment", "Payment")
                        .WithMany("AccountInvoicePaymentRels")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountJournal", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountAccount", "DefaultCreditAccount")
                        .WithMany()
                        .HasForeignKey("DefaultCreditAccountId");

                    b.HasOne("ApplicationCore.Entities.AccountAccount", "DefaultDebitAccount")
                        .WithMany()
                        .HasForeignKey("DefaultDebitAccountId");

                    b.HasOne("ApplicationCore.Entities.IRSequence", "RefundSequence")
                        .WithMany()
                        .HasForeignKey("RefundSequenceId");

                    b.HasOne("ApplicationCore.Entities.IRSequence", "Sequence")
                        .WithMany()
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountMove", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountMoveLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountFullReconcile", "FullReconcile")
                        .WithMany("ReconciledLines")
                        .HasForeignKey("FullReconcileId");

                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.AccountMove", "Move")
                        .WithMany("Lines")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany("AMoveLines")
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.AccountPayment", "Payment")
                        .WithMany("MoveLines")
                        .HasForeignKey("PaymentId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.UoM", "ProductUoM")
                        .WithMany()
                        .HasForeignKey("ProductUoMId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountPartialReconcile", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountMoveLine", "CreditMove")
                        .WithMany("MatchedDebits")
                        .HasForeignKey("CreditMoveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.AccountMoveLine", "DebitMove")
                        .WithMany("MatchedCredits")
                        .HasForeignKey("DebitMoveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.AccountFullReconcile", "FullReconcile")
                        .WithMany("PartialReconciles")
                        .HasForeignKey("FullReconcileId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountPayment", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");

                    b.HasOne("ApplicationCore.Entities.AccountAccount", "WriteoffAccount")
                        .WithMany()
                        .HasForeignKey("WriteoffAccountId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountRegisterPayment", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.AccountJournal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountRegisterPaymentInvoiceRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.AccountRegisterPayment", "Payment")
                        .WithMany("AccountRegisterPaymentInvoiceRels")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationUser", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountAccount", "AccountExpense")
                        .WithMany()
                        .HasForeignKey("AccountExpenseId");

                    b.HasOne("ApplicationCore.Entities.AccountAccount", "AccountIncome")
                        .WithMany()
                        .HasForeignKey("AccountIncomeId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKham", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Partner", "Assistant")
                        .WithMany()
                        .HasForeignKey("AssistantId");

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.AccountInvoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKhamLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.DotKham", "DotKham")
                        .WithMany()
                        .HasForeignKey("DotKhamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.DotKhamLineOperation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.DotKhamLine", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRSequence", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Partner", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PartnerPartnerCategoryRel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.PartnerCategory", "Category")
                        .WithMany("PartnerPartnerCategoryRels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany("PartnerPartnerCategoryRels")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ProductCategory", "Categ")
                        .WithMany()
                        .HasForeignKey("CategId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.UoM", "UOM")
                        .WithMany()
                        .HasForeignKey("UOMId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.UoM", "UOMPO")
                        .WithMany()
                        .HasForeignKey("UOMPOId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Routing", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RoutingLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Routing", "Routing")
                        .WithMany("Lines")
                        .HasForeignKey("RoutingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Partner", "OrderPartner")
                        .WithMany()
                        .HasForeignKey("OrderPartnerId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "Salesman")
                        .WithMany()
                        .HasForeignKey("SalesmanId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Tooth", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ToothCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ToothCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoM", b =>
                {
                    b.HasOne("ApplicationCore.Entities.UoMCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoMCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
