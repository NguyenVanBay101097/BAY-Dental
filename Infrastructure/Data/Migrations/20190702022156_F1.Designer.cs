// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20190702022156_F1")]
    partial class F1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<Guid>("PartnerId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PartnerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("PartnerId");

                    b.Property<string>("Phone");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WriteById");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ApplicationCore.Entities.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ProvinceId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WriteById");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRSequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("Implementation");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberIncrement");

                    b.Property<int>("NumberNext");

                    b.Property<int>("Padding");

                    b.Property<string>("Prefix");

                    b.Property<string>("Suffix");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("IRSequences");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Barcode");

                    b.Property<string>("Comment");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<bool>("Customer");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("DisplayName");

                    b.Property<Guid?>("DistrictId");

                    b.Property<string>("Email");

                    b.Property<bool>("Employee");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameNoSign");

                    b.Property<string>("Phone");

                    b.Property<Guid?>("ProvinceId");

                    b.Property<string>("Ref");

                    b.Property<string>("Street");

                    b.Property<bool>("Supplier");

                    b.Property<string>("Type");

                    b.Property<Guid?>("WardId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("WardId");

                    b.HasIndex("WriteById");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CategId");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("DefaultCode");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameGet");

                    b.Property<bool>("PurchaseOK");

                    b.Property<bool>("SaleOK");

                    b.Property<string>("Type");

                    b.Property<Guid>("UOMId");

                    b.Property<Guid>("UOMPOId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CategId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UOMId");

                    b.HasIndex("UOMPOId");

                    b.HasIndex("WriteById");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AmountTax");

                    b.Property<decimal?>("AmountTotal");

                    b.Property<decimal?>("AmountUntaxed");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime>("DateOrder");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<Guid>("PartnerId");

                    b.Property<string>("State");

                    b.Property<string>("UserId");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UserId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleOrders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<decimal>("Discount");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid?>("OrderPartnerId");

                    b.Property<decimal>("PriceSubTotal");

                    b.Property<decimal>("PriceTax");

                    b.Property<decimal>("PriceTotal");

                    b.Property<decimal>("PriceUnit");

                    b.Property<Guid?>("ProductId");

                    b.Property<decimal>("ProductUOMQty");

                    b.Property<string>("SalesmanId");

                    b.Property<string>("State");

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderPartnerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("WriteById");

                    b.ToTable("SaleOrderLines");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<decimal>("Factor");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("MeasureType");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Rounding");

                    b.Property<string>("UOMType")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("UoMs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoMCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("MeasureType")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WriteById");

                    b.ToTable("UoMCategories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Ward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<Guid>("DistrictId");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("WriteById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistrictId");

                    b.HasIndex("WriteById");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ApplicationUser", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Company", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.District", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.IRSequence", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Partner", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("ApplicationCore.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("ApplicationCore.Entities.District", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ProductCategory", "Categ")
                        .WithMany()
                        .HasForeignKey("CategId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.UoM", "UOM")
                        .WithMany()
                        .HasForeignKey("UOMId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.UoM", "UOMPO")
                        .WithMany()
                        .HasForeignKey("UOMPOId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Province", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SaleOrderLine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.SaleOrder", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Partner", "OrderPartner")
                        .WithMany()
                        .HasForeignKey("OrderPartnerId");

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "Salesman")
                        .WithMany()
                        .HasForeignKey("SalesmanId");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoM", b =>
                {
                    b.HasOne("ApplicationCore.Entities.UoMCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UoMCategory", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Ward", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ApplicationCore.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteById");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
